name: Manual Build

on:
  workflow_dispatch:
    inputs:
      target:
        type: choice
        description: Choose Target
        default: 'all'
        options:
        - 'all'
        - 'esp32'
        - 'esp32s2'
        - 'esp32s3'
        - 'esp32c2'
        - 'esp32c3'
        - 'esp32c6'
        - 'esp32h2'
        - 'esp32p4'
      log_level:
        type: choice
        description: Choose Log Level
        default: 'default'
        options:
        - 'default'
        - 'none'
        - 'verbose'
        - 'debug'
        - 'info'
        - 'warning'
        - 'error'
      latest-builder:
        description: 'Update esp32-arduino-lib-builder'
        type: boolean
        default: true 

permissions:
  contents: write

jobs:
  run:
    name: Build ${{ github.ref_name }} SDK For ${{ github.event.inputs.target }} as ${{ github.event.inputs.log_level }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Extract version from branch
        id: extract_version
        run: |
          ref="${GITHUB_REF_NAME}"
          echo "Current branch: $ref"

          if [[ "$ref" == "main" ]]; then
            VERSION_BASE="1.0.0"
            RELEASE_TYPE="main"
          elif [[ "$ref" =~ ^([^/]+)/([0-9]+\.[0-9]+(\.[0-9]+|\.x)?)$ ]]; then
            RELEASE_TYPE="${BASH_REMATCH[1]}"
            VERSION_BASE="${BASH_REMATCH[2]}"
          else
            echo "❌ Could not extract version from branch '$ref'"
            exit 1
          fi

          VERSION_TAG="${VERSION_BASE}.${GITHUB_RUN_NUMBER}"

          echo "VERSION_BASE=$VERSION_BASE" >> $GITHUB_ENV
          echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV
          echo "RELEASE_TYPE=$RELEASE_TYPE" >> $GITHUB_ENV
          echo "Extracted RELEASE_TYPE=$RELEASE_TYPE, VERSION_BASE=$VERSION_BASE, VERSION_TAG=$VERSION_TAG"


      - name: Apply Changes
        shell: bash
        env:
          GITHUB_UPDATE_BUILDER: ${{ github.event.inputs.latest-builder }}
        run: bash ./changes.sh

      - name: Install dependencies
        run: bash ./original/tools/prepare-ci.sh     

      - name: Build
        shell: bash
        env:
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
        run: |
          export TARGET_TYPE=${{ github.event.inputs.target }}
          export LOG_LEVEL=${{ github.event.inputs.log_level }}
          export RELEASE_TYPE=${{ env.RELEASE_TYPE }}
          echo "Building for $TARGET_TYPE (log_level: $LOG_LEVEL) - $RELEASE_TYPE"
          cd original
          bash ./build.sh -e -t $TARGET_TYPE -D $LOG_LEVEL
          cd ..

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          name: "Release ${{ github.run_number }} ${{ env.VERSION_BASE }} ${{ github.event.inputs.target }} (log_level: ${{ github.event.inputs.log_level }})"
          tag_name: ${{ env.VERSION_TAG }}
          token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            ./dist/*

      - name: Determine versions
        id: ver
        run: |
          TAG="${{ env.VERSION_TAG }}"
          MAJOR="${TAG%%.*}"
          MINOR="$(echo "$TAG" | cut -d '.' -f2)"
          echo "major=$MAJOR" >> $GITHUB_OUTPUT
          echo "minor=$MINOR" >> $GITHUB_OUTPUT

      - name: Define release aliases
        id: aliases
        run: |
          if [[ "${{ env.RELEASE_TYPE }}" == "release" ]]; then
            echo "aliases=Latest ${{ steps.ver.outputs.major }}.Latest ${{ steps.ver.outputs.major }}.${{ steps.ver.outputs.minor }}.Latest" >> $GITHUB_OUTPUT
          else
            echo "aliases=${{ env.RELEASE_TYPE }}Latest ${{ steps.ver.outputs.major }}.${{ env.RELEASE_TYPE }}.Latest ${{ steps.ver.outputs.major }}.${{ steps.ver.outputs.minor }}.${{ env.RELEASE_TYPE }}.Latest" >> $GITHUB_OUTPUT
          fi
          

      - name: Ensure release aliases
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          for tag in ${{ steps.aliases.outputs.aliases }}; do
            echo "Checking if release with tag '$tag' exists..."
            if gh release view "$tag" >/dev/null 2>&1; then
              echo "✅ Release $tag exists — updating..."
              gh release upload "$tag" ./dist/* --clobber
            else
              echo "➕ Release $tag does not exist — creating..."
              gh release create "$tag" ./dist/* --title "$tag" --notes "Auto-created alias for $tag"
            fi
          done